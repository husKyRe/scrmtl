name: build and test in NEXT branch
on:
  push:
    branches:
      - next

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: scrmtl-server
  WORK_DIR_BACKEND: ./backend/scrumtool

jobs:
  #backend job
  backendServer:
    name: 'build and test backend'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        python-version: [3.7.6]
    
    # Steps to deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python3.7 -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ${{ env.WORK_DIR_BACKEND }}
    - name: Run Tests
      run: |
        python manage.py test
      working-directory: ${{ env.WORK_DIR_BACKEND }}
    

  #Frontend job
  # frontendServer:
  #   name: 'build and test frontend'
  #   runs-on: ubuntu-latest
  #   needs: backendServer
  #   steps:
  #   - name: Build
  #     # Run a multi-line script|
  #     run: |
  #       npm install
  #   - name: 'Run Jest'
  #     uses: stefanoeb/jest-action@1.0.3
  #     with:
  #       # Args to jest
  #       jestArgs: frontend/tests/unit/example.spec.js   
  #   - name: 'Unit Test'
  #     run: |
  #       npm install --progress=false
  #       npm run test:unit
  
  # deploy to github docker registry
        
  deploy:
    name: 'build docker and deploy'
    runs-on: ubuntu-latest
    # needs: [backendServer, frontendServer]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        persist-credentials: false

    - name: Docker Build & Push to GitHub Package
      uses: opspresso/action-docker@master
      with:
        args: --docker
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        REGISTRY: "docker.pkg.github.com"
        DOCKERFILE: "dockerfile"
        IMAGE_NAME: ${{env.IMAGE_NAME}}
        LATEST: "true"

      
