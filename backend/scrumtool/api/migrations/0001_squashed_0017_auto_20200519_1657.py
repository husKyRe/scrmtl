# Generated by Django 3.0.3 on 2020-06-03 19:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# api.migrations.0006_auto_20200407_2129

def load_projects_from_fixture(apps, schema_editor):
    from django.core.management import call_command
    call_command("loaddata", "project_initial")
#    call_command("loaddata", "board")
#    call_command("loaddata", "lane")


def delete_projects(apps, schema_editor):
    Store = apps.get_model("api", "project")
    Store.objects.all().delete()


class Migration(migrations.Migration):

    replaces = [('api', '0001_initial'), ('api', '0002_auto_20200405_1241'), ('api', '0003_auto_20200405_1831'), ('api', '0004_auto_20200405_1959'), ('api', '0005_auto_20200405_2004'), ('api', '0006_auto_20200407_2129'), ('api', '0007_auto_20200408_2056'), ('api', '0008_auto_20200419_2133'), ('api',
                                                                                                                                                                                                                                                                                                      '0009_auto_20200514_2118'), ('api', '0010_auto_20200514_2120'), ('api', '0011_auto_20200514_2124'), ('api', '0012_auto_20200514_2147'), ('api', '0013_auto_20200516_1944'), ('api', '0014_auto_20200517_2335'), ('api', '0015_auto_20200517_2338'), ('api', '0016_auto_20200518_2321'), ('api', '0017_auto_20200519_1657')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('board_type', models.CharField(choices=[('PB', 'Product Backlog Board'), (
                    'SP', 'Sprint Backlog Board '), ('AB', 'Archiv Board')], max_length=2)),
                ('display_lane_horizontal', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Board',
                'verbose_name_plural': 'Boards',
            },
        ),
        migrations.CreateModel(
            name='Epic',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('numbering', models.IntegerField(default=0)),
                ('storypoints', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[
                 ('ns', 'not started'), ('do', 'done'), ('ip', 'in progress')], max_length=2)),
            ],
            options={
                'verbose_name': 'Epic(Card)',
                'verbose_name_plural': 'Epics(Card)',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('numbering', models.IntegerField(default=0)),
                ('storypoints', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[
                 ('ns', 'not started'), ('do', 'done'), ('ip', 'in progress')], max_length=2)),
                ('epic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='features', to='api.Epic')),
            ],
            options={
                'verbose_name': 'Feature',
                'verbose_name_plural': 'Features',
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(
                    help_text='This is the text the Label represents', max_length=256)),
                ('color', models.SlugField(
                    help_text='The color of the label in hex (ffffff)', max_length=6)),
            ],
            options={
                'verbose_name': 'Label',
                'verbose_name_plural': 'Labels',
            },
        ),
        migrations.CreateModel(
            name='Lane',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(
                    help_text='This represents the name of the lane', max_length=256)),
                ('numbering', models.IntegerField(default=0,
                                                  help_text='Describes the order of the lanes')),
                ('board', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, related_name='lanes', to='api.Board')),
            ],
            options={
                'verbose_name': 'Lane',
                'verbose_name_plural': 'Lanes',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(
                    help_text='This represents the name of the lane', max_length=256)),
                ('description', models.TextField(blank=True,
                                                 help_text='User description of the card', null=True)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(
                    help_text='User given name of the card', max_length=256)),
                ('description', models.TextField(blank=True,
                                                 help_text='User description of the card', null=True)),
                ('numbering', models.IntegerField(default=0,
                                                  help_text='Describes the order of the steps')),
                ('storypoints', models.IntegerField(default=0,
                                                    help_text='This is the name of the list itself')),
                ('status', models.CharField(choices=[('ns', 'not started'), ('do', 'done'), (
                    'ip', 'in progress')], default='ns', help_text='This is the name of the list itself', max_length=2)),
                ('feature', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='api.Feature')),
                ('lane', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='task_cards', to='api.Lane')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                                        related_name='polymorphic_api.task_set+', to='contenttypes.ContentType')),
                ('labels', models.ManyToManyField(
                    related_name='task_cards', to='api.Label')),
            ],
            options={
                'verbose_name': 'Task(Card)',
                'verbose_name_plural': 'Tasks(Card)',
            },
        ),
        migrations.AddField(
            model_name='feature',
            name='label',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='feature_cards', to='api.Label'),
        ),
        migrations.AddField(
            model_name='feature',
            name='lane',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='feature_cards', to='api.Lane'),
        ),
        migrations.AddField(
            model_name='feature',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_api.feature_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='epic',
            name='lane',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='epic_cards', to='api.Lane'),
        ),
        migrations.AddField(
            model_name='epic',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='polymorphic_api.epic_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='board',
            name='board',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='api.Project'),
        ),
        migrations.AlterModelOptions(
            name='feature',
            options={
                'verbose_name': 'Feature(Card)', 'verbose_name_plural': 'Features(Card)'},
        ),
        migrations.RemoveField(
            model_name='feature',
            name='label',
        ),
        migrations.AlterField(
            model_name='epic',
            name='description',
            field=models.TextField(
                blank=True, help_text='User description of the card', null=True),
        ),
        migrations.AlterField(
            model_name='epic',
            name='name',
            field=models.CharField(
                help_text='User given name of the card', max_length=256),
        ),
        migrations.AlterField(
            model_name='epic',
            name='numbering',
            field=models.IntegerField(
                default=0, help_text='Describes the order of the steps'),
        ),
        migrations.AlterField(
            model_name='epic',
            name='status',
            field=models.CharField(choices=[('ns', 'not started'), ('do', 'done'), (
                'ip', 'in progress')], help_text='This is the name of the list itself', max_length=2),
        ),
        migrations.AlterField(
            model_name='epic',
            name='storypoints',
            field=models.IntegerField(
                default=0, help_text='This is the name of the list itself'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='description',
            field=models.TextField(
                blank=True, help_text='User description of the card', null=True),
        ),
        migrations.AlterField(
            model_name='feature',
            name='name',
            field=models.CharField(
                help_text='User given name of the card', max_length=256),
        ),
        migrations.AlterField(
            model_name='feature',
            name='numbering',
            field=models.IntegerField(
                default=0, help_text='Describes the order of the steps'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='status',
            field=models.CharField(choices=[('ns', 'not started'), ('do', 'done'), (
                'ip', 'in progress')], help_text='This is the name of the list itself', max_length=2),
        ),
        migrations.AlterField(
            model_name='feature',
            name='storypoints',
            field=models.IntegerField(
                default=0, help_text='This is the name of the list itself'),
        ),
        migrations.CreateModel(
            name='Steplist',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='defaultSteplist',
                                          help_text='This is the name of the list itself', max_length=256)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='steplists', to='api.Task')),
            ],
            options={
                'verbose_name': 'Steplist',
                'verbose_name_plural': 'Steplist',
            },
        ),
        migrations.CreateModel(
            name='SteplistItem',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(
                    help_text='This is the text the user enters', max_length=256)),
                ('checked', models.BooleanField(default=False,
                                                help_text='Indicates that the step is finished')),
                ('numbering', models.IntegerField(default=0,
                                                  help_text='Describes the order of the steps')),
                ('steplist', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE, to='api.Steplist')),
            ],
            options={
                'verbose_name': 'Step',
                'verbose_name_plural': 'Step',
            },
        ),
        migrations.AlterField(
            model_name='board',
            name='board_type',
            field=models.CharField(choices=[('PB', 'Product Backlog Board'), ('SP', 'Sprint Backlog Board '), (
                'AB', 'Archiv Board')], help_text='This represents the type of board', max_length=2),
        ),
        migrations.AlterField(
            model_name='board',
            name='description',
            field=models.TextField(
                blank=True, help_text='User description of the card', null=True),
        ),
        migrations.AlterField(
            model_name='board',
            name='name',
            field=models.CharField(
                help_text='This represents the name of the lane', max_length=256),
        ),
        migrations.AlterField(
            model_name='epic',
            name='status',
            field=models.CharField(choices=[('ns', 'not started'), ('do', 'done'), (
                'ip', 'in progress')], default='ns', help_text='This is the name of the list itself', max_length=2),
        ),
        migrations.AlterField(
            model_name='feature',
            name='status',
            field=models.CharField(choices=[('ns', 'not started'), ('do', 'done'), (
                'ip', 'in progress')], default='ns', help_text='This is the name of the list itself', max_length=2),
        ),
        migrations.AddField(
            model_name='epic',
            name='labels',
            field=models.ManyToManyField(
                related_name='epic_cards', to='api.Label'),
        ),
        migrations.AddField(
            model_name='feature',
            name='labels',
            field=models.ManyToManyField(
                related_name='feature_cards', to='api.Label'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='card_attachement')),
            ],
            options={
                'verbose_name': 'File',
                'verbose_name_plural': 'Files',
            },
        ),
        migrations.RemoveField(
            model_name='epic',
            name='polymorphic_ctype',
        ),
        migrations.RemoveField(
            model_name='feature',
            name='polymorphic_ctype',
        ),
        migrations.RemoveField(
            model_name='task',
            name='polymorphic_ctype',
        ),
        migrations.AlterField(
            model_name='epic',
            name='labels',
            field=models.ManyToManyField(
                blank=True, related_name='epic_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='labels',
            field=models.ManyToManyField(
                blank=True, related_name='feature_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='task',
            name='labels',
            field=models.ManyToManyField(
                blank=True, related_name='task_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='epic',
            name='labels',
            field=models.ManyToManyField(
                blank=True, null=True, related_name='epic_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='labels',
            field=models.ManyToManyField(
                blank=True, null=True, related_name='feature_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='task',
            name='labels',
            field=models.ManyToManyField(
                blank=True, null=True, related_name='task_cards', to='api.Label'),
        ),
        migrations.RenameField(
            model_name='board',
            old_name='board',
            new_name='project',
        ),
        migrations.AlterField(
            model_name='board',
            name='project',
            field=models.ForeignKey(help_text='The project this board belongs to',
                                    on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='api.Project'),
        ),
        migrations.AddField(
            model_name='epic',
            name='files',
            field=models.ManyToManyField(
                blank=True, help_text='Files a user wants to be connected with the card', related_name='epic_files', to='api.File'),
        ),
        migrations.AlterField(
            model_name='epic',
            name='labels',
            field=models.ManyToManyField(
                blank=True, help_text='User defined label for the card', related_name='epic_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='epic',
            name='lane',
            field=models.ForeignKey(help_text='Lane this card belongs to',
                                    on_delete=django.db.models.deletion.CASCADE, related_name='epic_cards', to='api.Lane'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='epic',
            field=models.ForeignKey(
                blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='features', to='api.Epic'),
        ),
        migrations.AddField(
            model_name='feature',
            name='files',
            field=models.ManyToManyField(
                blank=True, help_text='Files a user wants to be connected with the card', related_name='feature_files', to='api.File'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='labels',
            field=models.ManyToManyField(
                blank=True, help_text='User defined label for the card', related_name='feature_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='feature',
            name='lane',
            field=models.ForeignKey(help_text='Lane this card belongs to',
                                    on_delete=django.db.models.deletion.CASCADE, related_name='feature_cards', to='api.Lane'),
        ),
        migrations.AlterField(
            model_name='label',
            name='color',
            field=models.SlugField(
                help_text='The color of the label in hex (#ffffff)', max_length=7),
        ),
        migrations.AlterField(
            model_name='lane',
            name='board',
            field=models.ForeignKey(help_text='The board this lane is associated with',
                                    on_delete=django.db.models.deletion.CASCADE, related_name='lanes', to='api.Board'),
        ),
        migrations.AlterField(
            model_name='task',
            name='feature',
            field=models.ForeignKey(
                blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='api.Feature'),
        ),
        migrations.AddField(
            model_name='task',
            name='files',
            field=models.ManyToManyField(
                blank=True, help_text='Files a user wants to be connected with the card', related_name='task_files', to='api.File'),
        ),
        migrations.AlterField(
            model_name='task',
            name='labels',
            field=models.ManyToManyField(
                blank=True, help_text='User defined label for the card', related_name='task_cards', to='api.Label'),
        ),
        migrations.AlterField(
            model_name='task',
            name='lane',
            field=models.ForeignKey(help_text='Lane this card belongs to',
                                    on_delete=django.db.models.deletion.CASCADE, related_name='task_cards', to='api.Lane'),
        ),
        migrations.AlterField(
            model_name='label',
            name='color',
            field=models.TextField(help_text='The color of the label in hex (#ffffff)', max_length=7, validators=[
                                   django.core.validators.RegexValidator('^#[A-Fa-f0-9]{6}$')]),
        ),
        migrations.AddField(
            model_name='project',
            name='end',
            field=models.DateField(
                blank=True, help_text='End of the project', null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='start',
            field=models.DateField(
                blank=True, help_text='Begin of the project', null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='status',
            field=models.CharField(choices=[('AR', 'Archiv'), ('AC', 'Active')],
                                   default='AC', help_text='This represents the type of board', max_length=2),
        ),
        migrations.AddField(
            model_name='project',
            name='dod',
            field=models.TextField(
                blank=True, help_text='Definition of Done ', null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='dor',
            field=models.TextField(
                blank=True, help_text='Definition of Ready ', null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='numOfSprints',
            field=models.PositiveIntegerField(
                blank=True, help_text='Number of Sprints possible ', null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='sprint_duration',
            field=models.PositiveIntegerField(
                blank=True, help_text='Duration of a sprint in days', null=True),
        ),
        migrations.RunPython(
            code=load_projects_from_fixture,
            reverse_code=delete_projects,
        ),
    ]
